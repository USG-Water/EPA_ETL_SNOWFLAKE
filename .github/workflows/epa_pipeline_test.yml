name: EPA Pipeline Test

on:
  # Run on pushes to any branch
  push:
    branches:
      - '**'
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/epa_pipeline_test.yml'
  
  # Run on pull requests
  pull_request:
    branches:
      - main
      - master
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      row_limit:
        description: 'Number of rows to test per file'
        required: false
        default: '1000'
        type: string

env:
  PYTHON_VERSION: '3.9'
  TEST_ROW_LIMIT: ${{ github.event.inputs.row_limit || '1000' }}
  
jobs:
  test-pipeline:
    name: Test EPA Data Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local
            /opt/hostedtoolcache/Python/*/x64/lib/python*/site-packages
          key: ${{ runner.os }}-pip-test-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-
            ${{ runner.os }}-pip-
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create Test Script
        run: |
          cat > run_test.py << 'SCRIPT_END'
          import os
          import sys
          import logging
          import pandas as pd
          from datetime import datetime

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          # Suppress Snowflake warnings
          logging.getLogger('snowflake.connector').setLevel(logging.WARNING)
          logging.getLogger('snowflake.connector.ocsp_snowflake').setLevel(logging.ERROR)

          def run_limited_test():
              max_rows = int(os.environ.get('MAX_ROWS_PER_TABLE', '1000'))
              logger.info(f"Running test with {max_rows} row limit")
              
              # Force test schema
              os.environ['SNOWFLAKE_SCHEMA'] = 'EPA_TEST_RESULTS'
              
              # Monkey-patch pandas to limit rows
              original_read = pd.read_csv
              def limited_read(*args, **kwargs):
                  if 'nrows' not in kwargs or kwargs.get('nrows', max_rows) > max_rows:
                      kwargs['nrows'] = max_rows
                  return original_read(*args, **kwargs)
              pd.read_csv = limited_read
              
              # Try to import and run SDWA
              try:
                  if os.path.exists('epa_sdwa_loader.py'):
                      logger.info("Testing SDWA loader...")
                      import epa_sdwa_loader
                      
                      # Override table naming to add TEST_ prefix
                      if hasattr(epa_sdwa_loader, 'get_table_name_from_filename'):
                          orig_name = epa_sdwa_loader.get_table_name_from_filename
                          epa_sdwa_loader.get_table_name_from_filename = lambda f: "TEST_" + orig_name(f)
                      
                      result = epa_sdwa_loader.main()
                      logger.info(f"SDWA test result: {result}")
                  else:
                      logger.warning("SDWA loader not found")
                      result = 0
              except Exception as e:
                  logger.error(f"SDWA test failed: {e}")
                  result = 1
              
              return result

          if __name__ == "__main__":
              sys.exit(run_limited_test())
          SCRIPT_END
      
      - name: Run Test
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: EPA_TEST_RESULTS
          SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
          MAX_ROWS_PER_TABLE: ${{ env.TEST_ROW_LIMIT }}
        run: |
          echo "Starting test with row limit: ${MAX_ROWS_PER_TABLE}"
          python run_test.py
      
      - name: Test Summary
        if: always()
        run: |
          echo "Test completed"
          echo "Tables created in EPA_TEST_RESULTS with TEST_ prefix"
          echo "Maximum ${TEST_ROW_LIMIT} rows per table"
